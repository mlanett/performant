#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-

require "bundler/setup"

require "performant"
require "performant/utilities/task"

# 10 processes
# 10 seconds
# start-finish repeatedly
# count failures (false)
# count errors

class Stress < Performant::Utilities::Task

  option "p", :processes, default: 10
  option "d", :duration,  default: 10

  def run

    Performant::Configuration.load! src: File.expand_path( "../example.yml", __FILE__ ), env: "test"

    quit = Time.now + duration

    # launch a monitor first
    fork do
      s = Performant.storage("stress")
      s.nuke!
      while Time.now < quit + 1 do
        sleep(1)
        puts s.robustly { s.tick! }.inspect
      end
    end

    processes.times do
      fork do
        monitor = Performant.monitor("stress")
        while Time.now < quit do
          monitor.track() { sleep(rand) } # working time
          sleep(rand)                     # unproductive time
        end
      end
    end

    Process.waitall
  end

end

Stress.parse(ARGV).run
