#!/usr/bin/env ruby

require "bundler/setup"
require "performant"

# generate 3+e days of data
# for each day, generate data on a bell curve

DAY   = 86400
NUM   = 10000 # per day
LEN_s = 10   # max for each event

def normal
  ( rand + rand + rand + rand + rand + rand + rand + rand ) / 8.0
end

def event( day )
  # create a single event in day
  # events will cluster around mid-day
  # events will also get longer around mid-day
  inday  = normal # 0.0...1.0 with 0.5 == mid-day
  busy   = 2 * ( inday > 0.5 ? 1 - inday : inday ) # 0.0 least to 1.0 max
  start  = day + DAY * inday
  finish = start + normal * LEN_s * busy
  ( start ... finish )
end

def simulate()
  events = []
  # generate 100000 events
  now = Time.now
  mid = Time.at( now.to_i - now.to_i % DAY )
  day = mid - 3 * DAY
  nid = 1

  while day < now do
    puts "Simulating #{day}"
    NUM.times do
      id   = nid.to_s
      nid += 1
      sf   = event( day )
      # disregard anything after now
      if sf.last < now then
        events << [ id, :start, sf.first ]
        events << [ id, :finish, sf.last ]
      end
    end
    day += DAY
  end

  puts "Sorting"
  events.sort_by { |e| e.last }
end

def record( events, storage )
  puts "Recording"
  events.each do |event|
    if event[1] == :start
      storage.record_start( event[0], time: event[2] )
    else
      storage.record_finish( event[0], time: event[2] )
    end
  end
end

Performant::Configuration.load! src: File.expand_path( "../performant.yml", __FILE__ ), env: "test"
monitor = Performant.monitor("fake")
storage = Performant.storage("fake")

storage.nuke!
events = simulate()
record( events, storage )
